const express = require('express');
const mongoose = require('mongoose');
const WebSocket = require("ws");
const path = require('path');
const axios = require("axios");

const app = express();
const port = process.env.PORT || 3001;
const wsPort = 3002;

// ERREURS CORS
const cors = require("cors");
app.use(cors({
    origin: "http://localhost:3003",
    methods: ["GET", "POST", "PUT", "DELETE"],
    allowedHeaders: ["Content-Type"]
}));

const PLANTPATH = "http://localhost:3003";
const TRANSPORTPATH = "http://localhost:3004";

let clientsCon = [];



// Connexion √† MongoDB
mongoose.connect('mongodb://localhost/logistics', { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('Connexion MongoDB r√©ussie'))
    .catch((err) => console.log('Erreur de connexion MongoDB:', err));

// D√©finition du mod√®le Mongoose pour stocker les √©changes
const exchangeSchema = new mongoose.Schema({
    type: String,
    data: mongoose.Schema.Types.Mixed,
    timestamp: { type: Date, default: Date.now }
});

const Exchange = mongoose.model('Exchange', exchangeSchema);

// Serveur HTTP Express pour servir index.html
app.use(express.static(path.join(__dirname, 'public')));

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.listen(port, () => {
    console.log(`Server app listening at http://localhost:${port}`);
});

// Serveur WebSocket
const server = new WebSocket.Server({ port: wsPort });

console.log(`WebSocket server listening on ws://localhost:${wsPort}`);

server.on("connection", (ws) => {
    clientsCon.push(ws);

    ws.on("message", async (message) => {
        const data = JSON.parse(message);  // On parse le message une seule fois
        console.log("Message type re√ßu:", data);  // Affiche l'objet au lieu du message brut

        switch (data.type) {  // Utilise data.type au lieu de message.type
            case "order":
                console.log("üì¶ Commande re√ßue :", data.data);
                const exchange = new Exchange({
                    type: data.type,
                    data: data.data
                });

                exchange.save()
                    .then(() => console.log('√âchange sauvegard√© dans MongoDB'))
                    .catch((err) => console.log('Erreur lors de la sauvegarde:', err));
                break;

            // üî¥ Refus d'une proposition ‚Üí supprimer la proposition
            case "refuse":
                try {
                    await Exchange.deleteOne({ "data.proposalId": data.data.proposalId });
                    console.log(`‚ùå Proposition refus√©e supprim√©e : ${data.data.proposalId}`);
                } catch (err) {
                    console.error("Erreur lors de la suppression de la proposition :", err);
                }
                break;

            // ‚úÖ Acceptation ‚Üí supprimer toutes les autres propositions du m√™me orderId
            case "accept":
                try {
                    const { orderId, proposalId } = data.data;

                    // Supprimer toutes les autres propositions li√©es √† cette commande
                    await Exchange.deleteMany({
                        "data.orderId": orderId,
                        "data.proposalId": { $ne: proposalId }
                    });

                    // Mettre √† jour la proposition accept√©e
                    await Exchange.updateOne(
                        { "data.proposalId": proposalId },
                        { $set: { "type": "valided" } }
                    );

                    // Notifier les clients de l'acceptation
                    notifyClients(clientsCon, [data.data], "valided");

                    console.log(`‚úÖ Proposition accept√©e. Autres propositions supprim√©es pour la commande ${orderId}`);
                } catch (err) {
                    console.error("Erreur lors de l'acceptation de l'offre :", err);
                }
                break;

            // üîÑ N√©gociation ‚Üí mise √† jour du prix (budget)
            case "negociate":
                try {
                    const { proposalId, newPrice } = data.data;

                    //lancer la n√©gociation
                    let newBudget = await startNegotiation(newPrice);

                    console.log("proposalID : ", proposalId)
                    console.log("le ancien budget trouv√© est : ", newPrice)

                    console.log("le new budget trouv√© est : ", newBudget)

                    if (newBudget != newPrice) {

                        const result = await Exchange.updateOne(
                            { "data.proposalId": proposalId },
                            { $set: { "data.CDC.budget": newBudget } }
                        );

                        if (result.modifiedCount > 0) {
                            console.log(`üîÑ N√©gociation r√©ussie, nouveau prix : ${newBudget}`);
                        } else {
                            console.log("‚ùå Aucune proposition trouv√©e √† mettre √† jour.");
                        }

                        // Recup√®re la proposition mise √† jour
                        const updatedExchange = await Exchange.findOne({ "data.proposalId": proposalId });

                        if (updatedExchange) {
                            notifyClients(clientsCon, [updatedExchange.data], "negociate");
                        } else {
                            console.warn("‚ö†Ô∏è Aucun √©change mis √† jour trouv√© pour le proposalId :", proposalId);
                        }

                    } else {
                        // On supprime la proposition si la n√©gociation √©choue
                        await Exchange.deleteOne({ "data.proposalId": proposalId });
                        console.log("‚ùå N√©gociation √©chou√©e");
                    }


                    console.log(`üîÑ Proposition mise √† jour avec nouveau prix : ${newPrice}`);
                } catch (err) {
                    console.error("Erreur lors de la n√©gociation :", err);
                }
                break;

            default:
                console.warn("üü° Type de message WebSocket non reconnu :", data.type);
        }
    });

    ws.on("close", () => {
        console.log("Client d√©connect√©");
        // On r√©initialise la variable pour √©viter d'envoyer un message √† un client non connect√©
    });

    ws.on("error", (error) => {
        console.error("Erreur WebSocket:", error);
        // On r√©initialise √©galement en cas d'erreur
    });
});



// ############################ LOGISTIC - PLANT ########################## //

app.use(express.json());

app.get('/exchanges', async (req, res) => {
    try {
        const exchanges = await Exchange.find().sort({ timestamp: -1 }).limit(10);
        // console.log("‚úÖ √âchanges r√©cup√©r√©s :", exchanges);
        res.json(exchanges);
    } catch (err) {
        res.status(500).send('Erreur lors de la r√©cup√©ration des √©changes');
    }
});
app.post("/start-negotiation", async (req, res) => {
    console.log("üì§ Envoi de la premi√®re proposition...");

    try {
        await Exchange.deleteMany({ type: { $in: ["order", "proposal"] } });
        console.log("üóëÔ∏è Anciennes commandes et propositions supprim√©es avant l'envoi");

        const response = await axios.post(PLANTPATH + "/proposition", req.body);
        const propositions = response.data.propositions;

        console.log("‚úÖ Propositions re√ßues :", propositions);

        const acceptedPropositions = propositions.filter(p => p.accept === true);

        for (const prop of acceptedPropositions) {
            const acceptedExchange = new Exchange({
                type: "proposal",
                data: prop
            });

            await acceptedExchange.save();
        }

        // üîî Notifier les clients WebSocket
        notifyClients(clientsCon, acceptedPropositions, "proposal");

        console.log(`üíæ ${acceptedPropositions.length} propositions accept√©es sauvegard√©es.`);

        res.json({
            message: "Proposition envoy√©e",
            accepted: acceptedPropositions
        });
    } catch (error) {
        console.error("‚ùå Erreur lors de l'envoi :", error.message);
        res.status(500).json({ error: error.message });
    }
});


// Fonction pour lancer une n√©gociation
async function startNegotiation(newBudget) {
    console.log("üîÑ Lancement de la n√©gociation...");
    try {
        const response = await axios.post(PLANTPATH + "/negociate", {
            newBudget: newBudget
        });
        console.log("‚úÖ N√©gociation lanc√©e :", response.data);
        return response.data.res;
    } catch (error) {
        console.error("‚ùå Erreur lors du lancement de la n√©gociation :", error.message);
        throw error;
    }
}

// Fonction pour vider la base de donn√©es
async function clearDatabase() {
    try {
        await Exchange.deleteMany({});
        console.log("üóëÔ∏è Base de donn√©es vid√©e avec succ√®s");
    } catch (error) {
        console.error("‚ùå Erreur lors de la suppression de la base de donn√©es :", error.message);
    }
}



// Fonction pour notifier les clients WebSocket
function notifyClients(clientsCon, propositions, type) {
    propositions.forEach(prop => {
        const message = {
            type: type,
            data: {
                orderId: prop.orderId,
                proposalId: prop.proposalId,
                entreprise: prop.entreprise,
                CDC: prop.CDC,
                commentaire: prop.commentaire,
            }
        };

        clientsCon.forEach(client => {
            if (client.readyState === WebSocket.OPEN) {
                client.send(JSON.stringify(message));
            } else {
                console.error("‚ùå Client non connect√©, impossible d'envoyer la proposition");
            }
        });
    });
}

// ########################### TRANSPORTER ####################### //

app.use(express.json());

// M√©moire locale
let logs = [];

// Envoie d'une proposition initiale
app.post("/start-negotiation-transporter", async (req, res) => {
    console.log("üì§ Envoi de la proposition initiale √† Transporter...");

    try {
        const response = await axios.post(`${TRANSPORTPATH}/proposition`, req.body);
        console.log("‚úÖ Proposition envoy√©e :", response.data.proposition);

        logs.push({ type: "proposition", data: req.body });

        res.json({ message: "Proposition envoy√©e √† Transporter", state: req.body });
    } catch (error) {
        console.error("‚ùå Erreur lors de l'envoi :", error.message);
        res.status(500).json({ error: error.message });
    }
});

// R√©ception de la r√©ponse de Transporter
app.post("/update-transporter", (req, res) => {
    const negotiationState = req.body.negotiationState;
    console.log("üì© R√©ponse re√ßue de Transporter :", negotiationState);

    logs.push({ type: "negotiation", data: negotiationState });

    if (negotiationState.accept === false) {
        console.log("üîÑ Proposition refus√©e. Pr√©paration d'une nouvelle proposition...");

        negotiationState.CDC.quantite += 20;
        negotiationState.CDC.delai = "15 jours";
        negotiationState.accept = null;
        negotiationState.commentaire = "Nouvelle proposition apr√®s refus";

        // R√©envoi d'une nouvelle proposition
        setTimeout(async () => {
            try {
                await axios.post(`${TRANSPORTPATH}/proposition`, negotiationState);
                console.log("üì§ Nouvelle proposition envoy√©e apr√®s refus.");
            } catch (err) {
                console.error("‚ùå Erreur lors du renvoi :", err.message);
            }
        }, 1000);
    } else {
        console.log("‚úÖ Proposition accept√©e. Fin de la n√©gociation.");
    }

    res.json({ message: "R√©ponse trait√©e", state: negotiationState });
});

